// <auto-generated />
using System;
using ContractTracker.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ContractTracker.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ContractTracker.Domain.Entities.Contract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("ActualBurnedAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("ContractNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("EstimatedAnnualBurn")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("EstimatedMonthlyBurn")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("FundedValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<bool>("IsPrime")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastCalculatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PrimeContractorName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal>("StandardFTEHours")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("TotalValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("ContractNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_Contracts_ContractNumber");

                    b.HasIndex("CustomerName")
                        .HasDatabaseName("IX_Contracts_CustomerName");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Contracts_Status");

                    b.HasIndex("StartDate", "EndDate")
                        .HasDatabaseName("IX_Contracts_Dates");

                    b.ToTable("Contracts", (string)null);
                });

            modelBuilder.Entity("ContractTracker.Domain.Entities.ContractLCAT", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("LCATId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("OverrideBillRate")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("ContractId")
                        .HasDatabaseName("IX_ContractLCATs_ContractId");

                    b.HasIndex("LCATId")
                        .HasDatabaseName("IX_ContractLCATs_LCATId");

                    b.HasIndex("ContractId", "LCATId", "EffectiveDate")
                        .HasDatabaseName("IX_ContractLCATs_Contract_LCAT_Effective");

                    b.ToTable("ContractLCATs", (string)null);
                });

            modelBuilder.Entity("ContractTracker.Domain.Entities.ContractLCATRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("BillRate")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("LCATId")
                        .HasColumnType("uuid");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("LCATId");

                    b.ToTable("ContractLCATRate");
                });

            modelBuilder.Entity("ContractTracker.Domain.Entities.ContractModification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Justification")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("NewValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("PreviousValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ContractId")
                        .HasDatabaseName("IX_ContractModifications_ContractId");

                    b.HasIndex("ModificationDate")
                        .HasDatabaseName("IX_ContractModifications_Date");

                    b.ToTable("ContractModifications", (string)null);
                });

            modelBuilder.Entity("ContractTracker.Domain.Entities.ContractResource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("AllocationPercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)");

                    b.Property<decimal>("AnnualHours")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)");

                    b.Property<decimal?>("ContractBillRateOverride")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ContractId")
                        .HasDatabaseName("IX_ContractResources_ContractId");

                    b.HasIndex("ResourceId")
                        .HasDatabaseName("IX_ContractResources_ResourceId");

                    b.HasIndex("ContractId", "ResourceId")
                        .IsUnique()
                        .HasDatabaseName("UX_ContractResources_ActiveAssignment")
                        .HasFilter("\"IsActive\" = true");

                    b.HasIndex("ContractId", "ResourceId", "IsActive")
                        .HasDatabaseName("IX_ContractResources_Contract_Resource_Active");

                    b.ToTable("ContractResources", (string)null);
                });

            modelBuilder.Entity("ContractTracker.Domain.Entities.LCAT", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_LCATs_IsActive");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_LCATs_Name");

                    b.ToTable("LCATs", (string)null);
                });

            modelBuilder.Entity("ContractTracker.Domain.Entities.LCATRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("LCATId")
                        .HasColumnType("uuid");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<decimal>("Rate")
                        .HasColumnType("numeric");

                    b.Property<int>("RateType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LCATId");

                    b.ToTable("LCATRate");
                });

            modelBuilder.Entity("ContractTracker.Domain.Entities.PositionTitle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LCATId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LCATId");

                    b.ToTable("PositionTitle");
                });

            modelBuilder.Entity("ContractTracker.Domain.Entities.Resource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ClearanceExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ClearanceLevel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("CurrentPayRate")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<Guid?>("LCATId")
                        .HasColumnType("uuid");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Resources_Email");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Resources_IsActive");

                    b.HasIndex("LCATId")
                        .HasDatabaseName("IX_Resources_LCATId");

                    b.HasIndex("FirstName", "LastName")
                        .HasDatabaseName("IX_Resources_Name");

                    b.ToTable("Resources", (string)null);
                });

            modelBuilder.Entity("ContractTracker.Domain.Entities.ContractLCAT", b =>
                {
                    b.HasOne("ContractTracker.Domain.Entities.Contract", "Contract")
                        .WithMany("ContractLCATs")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContractTracker.Domain.Entities.LCAT", "LCAT")
                        .WithMany()
                        .HasForeignKey("LCATId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contract");

                    b.Navigation("LCAT");
                });

            modelBuilder.Entity("ContractTracker.Domain.Entities.ContractLCATRate", b =>
                {
                    b.HasOne("ContractTracker.Domain.Entities.Contract", "Contract")
                        .WithMany()
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContractTracker.Domain.Entities.LCAT", "LCAT")
                        .WithMany("ContractRates")
                        .HasForeignKey("LCATId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");

                    b.Navigation("LCAT");
                });

            modelBuilder.Entity("ContractTracker.Domain.Entities.ContractModification", b =>
                {
                    b.HasOne("ContractTracker.Domain.Entities.Contract", "Contract")
                        .WithMany("ContractModifications")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("ContractTracker.Domain.Entities.ContractResource", b =>
                {
                    b.HasOne("ContractTracker.Domain.Entities.Contract", "Contract")
                        .WithMany("ContractResources")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContractTracker.Domain.Entities.Resource", "Resource")
                        .WithMany("ContractResources")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contract");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("ContractTracker.Domain.Entities.LCATRate", b =>
                {
                    b.HasOne("ContractTracker.Domain.Entities.LCAT", "LCAT")
                        .WithMany("Rates")
                        .HasForeignKey("LCATId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LCAT");
                });

            modelBuilder.Entity("ContractTracker.Domain.Entities.PositionTitle", b =>
                {
                    b.HasOne("ContractTracker.Domain.Entities.LCAT", "LCAT")
                        .WithMany("PositionTitles")
                        .HasForeignKey("LCATId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LCAT");
                });

            modelBuilder.Entity("ContractTracker.Domain.Entities.Resource", b =>
                {
                    b.HasOne("ContractTracker.Domain.Entities.LCAT", "LCAT")
                        .WithMany()
                        .HasForeignKey("LCATId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("LCAT");
                });

            modelBuilder.Entity("ContractTracker.Domain.Entities.Contract", b =>
                {
                    b.Navigation("ContractLCATs");

                    b.Navigation("ContractModifications");

                    b.Navigation("ContractResources");
                });

            modelBuilder.Entity("ContractTracker.Domain.Entities.LCAT", b =>
                {
                    b.Navigation("ContractRates");

                    b.Navigation("PositionTitles");

                    b.Navigation("Rates");
                });

            modelBuilder.Entity("ContractTracker.Domain.Entities.Resource", b =>
                {
                    b.Navigation("ContractResources");
                });
#pragma warning restore 612, 618
        }
    }
}
